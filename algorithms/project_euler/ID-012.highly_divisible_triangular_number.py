# Highly divisible triangular number
'''
Problem 12
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

1: 1
3: 1,3
6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
'''


import math
from time import time


def natural_sum(n):
    """
    It takes a number, n, and returns the sum of the first n natural numbers
    
    :param n: The number of natural numbers to sum up
    :return: The sum of the first n natural numbers.
    """
    return int(n * (n + 1) / 2)


def get_numDivisiors(num):
    """
    It counts the number of divisors of a number by checking if the number is divisible by all numbers
    from 1 to the square root of the number
    
    :param num: The number to find the number of divisors of
    :return: The number of divisors of a number.
    """
    count = 0
    for i in range(1, int(math.sqrt(num))+1, 1):
        if num % i == 0:
            count = count + 2
    return count


def highly_divisible_triangular_number(target):
    """
    It finds the first triangular number with more than 500 divisors
    
    :param target: the number of divisors we want to find
    :return: The highly divisible triangular number, the number of the triangle, and the time it took to
    find the answer.
    """
    # TODO: need to improve this
    t = time()
    numberOfDivisors = 0
    num = 0
    while numberOfDivisors < target:
        num = num + 1
        tNum = natural_sum(num)
        numberOfDivisors = get_numDivisiors(tNum)
    tt = time()-t
    return tNum, num, tt


# 76576500 in 10.28 seconds bad!!!...
print(highly_divisible_triangular_number(500))
