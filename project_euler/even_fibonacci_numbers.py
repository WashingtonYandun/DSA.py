# Even Fibonacci numbers
'''
Problem 2
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
'''

'''
########################
My first and bad aproach
########################
'''

import sys
sys.setrecursionlimit(5000000)


memory = {0: 0, 1: 1, 2: 2}


def fibo(num):
    """
    If the number is in the memory, return the value from the memory, otherwise, calculate the value and
    store it in the memory

    :param num: The number of the Fibonacci sequence you want to find
    :return: The value of the fibonacci number at the given index.
    """
    if num in memory:
        return memory[num]
    memory[num] = fibo(num - 1) + fibo(num - 2)
    return memory[num]


def sum_even(memory):
    """
    It takes a dictionary as an argument and returns the sum of all the even numbers in the dictionary

    :param memory: a dictionary of integers
    :return: The sum of all the even numbers in the list.
    """
    totalSum = 0
    for pos in memory:
        currentNum = memory.get(pos)
        if memory.get(pos) % 2 == 0:
            totalSum = totalSum + currentNum
    return totalSum


def even_fibo(num, memory):
    """
    It takes a number and a memory, and returns the sum of the even fibonacci numbers up to the number
    
    :param num: the number of fibonacci numbers to generate
    :param memory: a list of all the fibonacci numbers up to the number given
    :return: The sum of all even numbers in the fibonacci sequence up to the number given.
    """
    fibo(num)
    evenFiboSum = sum_even(memory)
    return evenFiboSum


# print(even_fibo(4000000, memory))

'''
########################
My Second try
########################
'''


def sum_even_fibo(num):
    """
    It takes a number as input and returns the sum of all even fibonacci numbers less than or equal to
    that number
    
    :param num: the number to which the fibonacci sequence will be calculated
    :return: The sum of all even fibonacci numbers less than or equal to num.
    """
    totalSum = 0
    a = 0
    b = 1
    while b <= num:
        if b % 2 == 0:
            totalSum = totalSum + b
        a, b = b, a + b
    return totalSum


def sum_even_fibo(num):
    """
    It's a fibonacci sequence generator that adds the even numbers to a total sum
    
    :param num: the number to which the fibonacci sequence will be calculated
    :return: The sum of all even fibonacci numbers up to the given number.
    """
    totalSum = 0
    a = 0
    b = 1

    while b <= num:
        # here is making the even sum
        if b % 2 == 0:
            totalSum = totalSum + b

        # here is fibo made, this time in an addition way
        a, b = b, a + b  # swap variables
    return totalSum


print(sum_even_fibo(4000000))
