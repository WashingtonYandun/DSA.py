# Highly divisible triangular number
'''
Problem 12
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

1: 1
3: 1,3
6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
'''


import math
from time import time


def natural_sum(n):
    return int(n * (n + 1) / 2)


def get_numDivisiors(num):
    count = 0
    for i in range(1, int(math.sqrt(num))+1, 1):
        if num % i == 0:
            count = count + 2
    return count


def highly_divisible_triangular_number(target):
    # TODO: need to improve this
    t = time()
    numberOfDivisors = 0
    num = 0
    while numberOfDivisors < target:
        num = num + 1
        tNum = natural_sum(num)
        numberOfDivisors = get_numDivisiors(tNum)
    tt = time()-t
    return tNum, num, tt


# 76576500 in 10.28 seconds bad!!!...
print(highly_divisible_triangular_number(500))
